T01: Command line basics and Anaconda
=====

The command line is an interface into which users type text to execute commands. Commands range in complexity from moving files to running publicly available software. Any function that you do using the graphical user interfaces (GUIs, pronounced "goo-wee"), like Finder on Mac or Windows File Explorer, can be done through the command line.  

For Mac users, the command line is an application called **Terminal**. On Windows, it is called the **command prompt**. In this tutorial, we will learn basic commands for managing files via the command line and install the software **Anaconda**, which provides an interface to use Python and R and manage data science packages.


Navigating through directories
----------------

Directory is a fancy name for a folder. Subdirectories are subfolders. Using the command line, you can easily move through folders on your machine using **paths**, which are addresses for files. For example, if I have a file called "test.py" in a folder called "Computing" on my desktop, then its file path is ``/users/skulkarni/Desktop/Computing.test.py``. Forward (not backward) slashes are used to separate levels of directories. Some common commands are shown below.

.. code-block:: console

   (base) % pwd                                 # Print Working (current) Directory
   (base) % cd Desktop/Computing                # change Current Directory to Desktop/Computing
   (base) % cd ..                               # move one level higher in the directory tree
   (base) % cd ../../../                        # move three levels higher in the directory tree
   (base) % ls                                  # print all files in the current directory
   (base) % cp file_1.txt copy_of_file_1.txt    # make a copy of file_1 called copy_of_file_1
   (base) % mv file_1.txt file_2.txt            # move file_1 to file_2. This also renames files
   (base) % mkdir new_dir                       # create new directory called new_dir
   (base) % rm file_1.txt                       # delete file_1
   (base) % rm -r old_dir                       # delete directory called old_dir
   (base) % cat file_1.txt                      # print the contents of file_1
   (base) % head -5 file_1.txt                  # print the first 5 lines of file_1
   (base) % tail -2 file_2.txt                  # print the last 2 lines of file_2
   
The list above is not exhaustive, and there are many more complex functions like ``grep`` that can help you parse files. These functions are often significantly faster when run on the command line than in Python or R, so it is useful to get familiar with them.

Installing Anaconda
----------------

To install Anaconda, click the download button for the appropriate operating system `here <https://www.anaconda.com/products/distribution>`_ and follow the instructions. If you are using a Linux operating system, then the **wget** command is your friend since there is no GUI like on Mac OS and Windows. For the most recent version of Anaconda as of writing, run the following on the command line:

.. code-block:: console

   (base) % wget https://repo.continuum.io/archive/Anaconda3-2022.05-Linux-x86_64.sh
   
   (base) % bash Anaconda3-2022.05-Linux-x86_64.sh 
   
The first line downloads a bash script, and the second runs it to create Anaconda on your machine. No matter which way you download it, Anaconda creates a folder in your home directory that can take up considerable space. IT IS NOT ADVISED TO MODIFY ANYTHING IN THIS FOLDER BECAUSE THINGS CAN EASILY BREAK. Leave the modifications to the package installers.

Because O2 is a Linux-based cluster, you will have to use the code above to install Anaconda on it.

Managing Packages
----------------

Packages are groups of functions that are shared between users. We can benefit from the expertise of others and avoid writing code to do functions that have already been done. The preferred way to install and manage packages is through Anaconda. To install a package, simply execute the following in the command line, where ``package_name`` is the name of your desired package:

.. code-block:: console

   (base) % conda install package_name
   
Anaconda packages are organized into channels. For efficiency, it is best to specify the channel of the desired package, otherwise, Anaconda needs to first search for its location. For example, the bioconda channel contains many packages relevant to biological analysis.

.. code-block:: console

   (base) % conda install -c bioconda samtools
   
Samtools is a suite of tools for parsing files of sequence alignments. The easiest way to find the channel of a package is simply to google it to find the Anaconda installation paage. 

Another way to install Python packages is through pip by running ``pip install package_name``. Pip can install more packages than conda and requires less time, but it doesn't check that package versions are compatible with each other, which can cause things to break. It is best to use conda as much as possible and resort to pip if conda can not install a given package.

If you are interested in reading more about their differences, check out this comparison `article <https://www.anaconda.com/blog/understanding-conda-and-pip>`_.


Environments
----------------

An environment consists of all the packages that have been installed. The default environment is called the **base** environment. Often when doing multiple projects, it is a good idea to separate your packages into **virtual environments**.
